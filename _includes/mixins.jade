//- - function memoize = function(){
//-     var self = this, cache = {};
//-     return function( arg ){
//-       if(arg in cache) {
//-         console.log('Cache hit for '+arg);
//-         return cache[arg];
//-       } else {
//-         console.log('Cache miss for '+arg);
//-         return cache[arg] = self( arg );
//-       }
//-     }
//-   }
- function merge(a,b){for (var f in b) { a[f] = b[f]}; return a}

- function allPosts(section,prefix){
  //- - function prefix(a,pre){
  - var r={};
  - for (var slug in section._data) {
    - if (section._data[slug]['index'] === false) continue;
    - if (slug == 'index') {
      - r[prefix] = section._data[slug] } 
    - else r[prefix+slug] = section._data[slug] }
  - for(var key in section){
    - if (key !== '_data' && key !== '_contents') {
      - merge(r, allPosts(section[key],prefix+key+'/')) }}
  - return r }

- function href(path){
  - return '/' + logicalPath(path).join('/') }

- function pathForHref(href){
  - return href.split('/').slice(1) }

- function subtree(path) {
  - 
  - var section = public;
  - for (var i = 0; i < path.length; i++) {
    - section = section[path[i]]
    - if (!section) return false }
  - return section }

- function children_of(path){
  - var idx = subtree(path);
  - var children = false
  - if (idx) {
    - all_children = idx['_data']
    - for (var slug in all_children) {
      - if (all_children[slug].index !== false) {
        - children = children || {}
        - children[slug] = idx[slug] }}}
  - return children }

- function getPost(path){
  - var section = subtree(path.slice(0,-1))
  - var post = section && section._data && section._data[slug(path)] || {}
  - post.path = path
  - return post }

- function logicalPath(path) {
  - if (path.length == 1) return path // can't go up from the top
  - return (path.slice(-1)[0] == 'index') ? path.slice(0, -1) : path }

- function slug(path) {return logicalPath(path).slice(-1)[0] || '' }

- function slugToTitle(slug) { // helper for title()
  - return slug.replace(/-/g,' ').replace(/([^\W_]+[^\s-]*) */g,function(w){
    - return w.charAt(0).toUpperCase() + w.substr(1)
  - })}

- function title(post) { // find a title for {path}
  - return post.title || slugToTitle(slug(post.path)) }

- function active(path) { // is {path} an ancestor of {current.path}?
  - return path.length <= current.path.length && href(current.path.slice(0, path.length)) == href(path) }

- function excerpt(path) {
  - var depth = current.path.length
  - var pathToRoot = Array(depth).join("../");
  - var content = partial(pathToRoot(current.path) + path.join('/')) || ""
  - if(content.indexOf("<!-- more -->") == -1) return content
  - else return content.split("<!-- more -->")[0] }

- var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
- function format_date(d){
  - var D = new Date(d)
  - return months[D.getMonth()]+' '+D.getDate()+', '+D.getFullYear() }

- function editUrl(path) {
  - var base = "http://prose.io/#prism-house/laurenhudgins.com/edit/master/"
  - return base + path.join('/') + '.md' }

mixin link(path)
  a(href=href(path) title=title(getPost(path)) class="post-link"+(active(path)?" active":""))
    if block
      block
    else
      = title(getPost(path))

mixin date_label(d)
  if d
    div.date(data-raw=d)= format_date(d)
    | 

mixin post_summary(path)
  .post-summary
    mixin link(path)
    mixin date_label(subtree(path).date)
    div.excerpt!= excerpt(path)

mixin nav(path)
  - var children = children_of(path)
  each post,slug in children
    mixin link(path.concat(slug))
